---@meta

--- Module `lapis.csrf`
---
---
--- CSRF protection provides a way to prevent unauthorized requests that
--- originate from other sites that are not your application. The common
--- approach is to generate a special token that is placed on pages that make
--- need to make calls with HTTP methods that are not *safe* (POST, PUT, DELETE,
--- etc.). This token must be sent back to the server on the requests to verify
--- the request came from a page generated by your application.
---
--- The default CSRF implementation generates a random string on the server and
--- stores it in the cookie. (The cookie's name is your session name followed by
--- `_token`.) The CSRF token is a cryptographically signed string that contains
--- the random string. You can optionally attach data to the CSRF token to
--- control how it can expire.
---
--- Before using any of the cryptographic functions it's important to set your
--- application's secret. This is a string that only the application knows about.
--- If your application is open source it's worthwhile to not commit this secret.
--- The secret is set in your configuration like so:
---
--- ```lua
--- local config = require("lapis.config")
---
--- config("development", {
---    secret = "this is my secret string 123456"
--- })
--- ```
---
--- Now that you have the secret configured, we might create a CSRF protected
--- form like so:
---
---```lua
--- local lapis = require("lapis")
--- local csrf = require("lapis.csrf")
---
--- local capture_errors = require("lapis.application").capture_errors
---
--- local app = lapis.Application()
---
--- app:get("form", "/form", function(self)
---    local csrf_token = csrf.generate_token(self)
---    self:html(function()
---       form({ method = "POST", action = self:url_for("form") }, function()
---          input({ type = "hidden", name = "csrf_token", value = csrf_token })
---          input({ type = "submit" })
---       end)
---    end)
--- end)
---
--- app:post("form", "/form", capture_errors(function(self)
---    csrf.assert_token(self)
---    return "The form is valid!"
--- end))
--- ```
---
--- Note: If you're using CSRF protection in a lot of actions then it might be
--- helpful to create a before filter that generates the token automatically.
---
--- [Functions](https://leafo.net/lapis/reference/utilities.html#csrf-protection)
local csrf = {}

--- Generates a token for the current session. If a random string has not been
--- set in the cookie yet, then it will be generated. You can optionally pass in
--- data to have it encoded into the token. You can then use the `callback`
--- parameter of `validate_token` to verify data's value.
---
--- The random string is stored in a cookie named as your session name with
--- `_token` appended to the end.
---@param req lapis.Request
---@param data any
---@return string
function csrf.generate_token(req, data) end

--- Validates the CSRF token located in `req.params.csrf_token`. For any
--- endpoints you validation the token on you must pass the query or form
--- parameter `csrf_token` with the value of the token returned by
--- `generate_token`.
---
--- If the validation fails then `nil` and an error message are returned. A
--- callback function can be provided as the second argument. It's a function
--- that will be called with the data payload stored in the token. You can
--- specify the data with the second argument of `generate_token`.
---
--- Here's an example of adding an expiration date using the token data:
---
--- ```lua
--- local lapis = require("lapis")
--- local csrf = require("lapis.csrf")
---
--- local capture_errors = require("lapis.application").capture_errors
---
--- local app = lapis.Application()
---
--- app:get("form", "/form", function(self)
---    local csrf_token = csrf.generate_token(self, {
---       -- expire in 4 hours
---       expires = os.time() + 60*60*4
---    })
---    -- render a form using csrf_token...
--- end)
---
--- app:post("form", "/form", capture_errors(function(self)
---    csrf.assert_token(self, function(data)
---       if os.time() > (data.expires or 0) then
---          return nil, "token is expired"
---       end
---
---       return true
---    end)
---
---    return "The request is valid!"
--- end))
--- ```
---@param req lapis.Request
---@param callback fun(data: any): boolean?, string
function csrf.validate_token(req, callback) end

--- First calls `validate_token` with same arguments, then calls `assert_error`
--- if validation fails.
---@param req lapis.Request
---@param callback fun(data: any): boolean?, string
function csrf.assert_token(req, callback) end

return csrf
