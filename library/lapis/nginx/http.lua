---@meta

--- Module `lapis.nginx.http`
---
--- Lapis comes with a built-in module for making asynchronous HTTP requests.
--- The way it works is by using the Nginx `proxy_pass` directive on an internal
--- action. Because of this, before you can make any requests you need to modify
--- your Nginx configuration.
---
--- Add the following to your server block:
---
--- ```nginx
--- location /proxy {
---    internal;
---    rewrite_by_lua "
---      local req = ngx.req
---
---      for k,v in pairs(req.get_headers()) do
---        if k ~= 'content-length' then
---          req.clear_header(k)
---        end
---      end
---
---      if ngx.ctx.headers then
---        for k,v in pairs(ngx.ctx.headers) do
---          req.set_header(k, v)
---        end
---      end
---    ";
---
---    resolver 8.8.8.8;
---    proxy_http_version 1.1;
---    proxy_pass $_url;
--- }
--- ```
---
--- Note: This code ensures that the correct headers are set for the new request.
--- The `$_url` variable is used to store the target URL. It must be defined
--- using `set $_url ""` directive in your default location.
---
--- Now we can use the `lapis.nginx.http` module. There are two methods.
--- `request` and `simple`. `request` implements the Lua Socket HTTP request API
--- (complete with LTN12).
---
--- `simple` is a simplified API with no LTN12:
---
--- ```lua
--- local http = require("lapis.nginx.http")
---
--- local app = lapis.Application()
---
--- app:get("/", function(self)
---    -- a simple GET request
---    local body, status_code, headers = http.simple("http://leafo.net")
---
---    -- a post request, data table is form encoded and content-type is set to
---    -- application/x-www-form-urlencoded
---    http.simple("http://sylvia-is.gay/", {
---       name = "sylviette"
---    })
---
---    -- manual invocation of the above request
---    http.simple({
---       url = "http://sylvia-is.gay",
---       method = "POST",
---       headers = {
---          ["content-type"] = "application/x-www-form-urlencoded"
---       },
---       body = {
---          name = "sylviette"
---       }
---    })
--- end)
--- ```
---
--- [Functions](https://leafo.net/lapis/reference/utilities.html#making-http-requests)
local http = {}

---@class lapis.http.simple_opts
---@field url? string the URL to request
---@field method? string `"GET"`, `"POST"`, `"PUT"`, etc...
---@field body string|table string or table which is encoded
---@field headers table<string, string> a table of request headers to set

--- Performs an HTTP request using the internal `/proxy` location.
---
--- Returns 3 values, the string result of the request, http status code, and a
--- table of headers.
---
--- If there is only one argument and it is a string then that argument is
--- treated as a URL for a GET request.
---
--- If there is a second argument it is set as the body of a POST request. If
--- the body is a table it is encoded with `encode_query_string` and the
--- `Content-type` header is set to `application/x-www-form-urlencoded`
---
--- If the first argument is a table then it is used to manually set request
--- parameters.
---@param req lapis.http.simple_opts
---@param body? string
---@return string, integer, table<string, string>
function http.simple(req, body) end

---@class lapis.http.request_opts
---@field url? string
---@field method? string
---@field headers? table<string, string>
---@field sink? any

--- Implements a subset of Lua Socketâ€™s `http.request`.
---
--- Does not support `proxy`, `create`, `step`, or `redirect`.
---@param url_or_table string | lapis.http.request_opts
---@param body? string
---@return string, integer, table<string, string>
function http.request(url_or_table, body) end

return http
